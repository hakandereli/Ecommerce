server.port=8081
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order-service
spring.datasource.username=root
spring.datasource.password=mypass1
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57InnoDBDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true


##-e (enviroment) ile veritaban? baglanaca??m?z kullanac?d? ad? ?ifre gibi environment lar? yazar?z
##-d (detach) arka planda çal??mas?n? sa?lad?k komut sat?r?n? i?gal etmedik
##-p (port-publish ) mysql çal??acak portu belirttik. Daha do?rusu taray?y?m?zdan eri?ebilce?imiz portu belirledik.
##-- name ile de containerimizin ad?n? tan?mlad?k
##-v volume ler yani stateless-geçici olmas?n docker stop dedi?inde içindeki veriler silinmesin bir yerde tutulsun bu veriler
## pull s?ras?nda / ile çekiyorsan oras? offical de?ildir.
## --link ba?ka bir containera ba?lan :db ise veritabanlar? için kullan?lan alias t?r localhost gibi dü?ün bunu gerçek hayatta

#docker pull mysql
#docker pull phpmyadmin/phpmyadmin
#docker run --name mysql-server -p 3306:3306 -v /opt/data:/etc/mysql/conf.f -e MYSQL_ROOT_PASSWORD=mypass1 -d mysql
#docker run --name pmyadmin -p 8000:80 --link mysql-server:db -d phpmyadmin/phpmyadmin
#taray?c?ya girip localhost:8080 yazd???nda phpmyadmin ekran? gelicek.
#asl?nda dbeaver tarz? bir uygulaman varsa oradan da görüntüleyebilirsin phpmyadmin kurmadan ama ben onu da docker dan kullan?cam dersen faydal? olabilir.